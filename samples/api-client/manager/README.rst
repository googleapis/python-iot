.. This file is automatically generated. Do not edit this file directly.

Google Cloud IoT Core API Python Samples
===============================================================================

This directory contains samples for Google Cloud IoT Core API. `Google Cloud IoT Core`_ allows developers to easily integrate Publish and Subscribe functionality with devices and programmatically manage device authorization.




.. _Google Cloud IoT Core API: https://cloud.google.com/vision/docs 

Setup
-------------------------------------------------------------------------------


Authentication
++++++++++++++

This sample requires you to have authentication setup. Refer to the
`Authentication Getting Started Guide`_ for instructions on setting up
credentials for applications.

.. _Authentication Getting Started Guide:
    https://cloud.google.com/docs/authentication/getting-started

Install Dependencies
++++++++++++++++++++

#. Install `pip`_ and `virtualenv`_ if you do not already have them. You may want to refer to the `Python Development Environment Setup Guide`_ for Google Cloud Platform for instructions.

 .. _Python Development Environment Setup Guide:
     https://cloud.google.com/python/setup

#. Create a virtualenv. Samples are compatible with Python 2.7 and 3.4+.

    .. code-block:: bash

        $ virtualenv env
        $ source env/bin/activate

#. Install the dependencies needed to run the samples.

    .. code-block:: bash

        $ pip install -r requirements.txt

.. _pip: https://pip.pypa.io/
.. _virtualenv: https://virtualenv.pypa.io/

Samples
-------------------------------------------------------------------------------

Manager
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



To run this sample:

.. code-block:: bash

    $ python manager.py

    usage: manager.py [-h] --pubsub_topic PUBSUB_TOPIC [--project_id PROJECT_ID]
                      [--ec_public_key_file EC_PUBLIC_KEY_FILE]
                      [--rsa_certificate_file RSA_CERTIFICATE_FILE]
                      [--cloud_region CLOUD_REGION]
                      [--service_account_json SERVICE_ACCOUNT_JSON]
                      [--registry_id REGISTRY_ID] [--device_id DEVICE_ID]
                      {create-es256,create-registry,create-rsa256,create-topic,create-unauth,delete-device,delete-registry,get,get-registry,get-state,list,list-registries,patch-es256,patch-rs256}
                      ...
    
    Example of using the Google Cloud IoT Core device manager to administer
    devices.
    
    Usage example:
    
        python manager.py \
          --project_id=my-project-id \
          --pubsub_topic=projects/my-project-id/topics/my-topic-id \
          --ec_public_key_file=../ec_public.pem \
          --rsa_certificate_file=../rsa_cert.pem \
          --service_account_json=$HOME/service_account.json
          list
    
    positional arguments:
      {create-es256,create-registry,create-rsa256,create-topic,create-unauth,delete-device,delete-registry,get,get-registry,get-state,list,list-registries,patch-es256,patch-rs256}
        create-es256        Create a new device with the given id, using ES256 for
                            authentication.
        create-registry     Gets or creates a device registry.
        create-rsa256       Create a new device with the given id, using RS256 for
                            authentication.
        create-topic        Creates a PubSub Topic and grants access to Cloud IoT
                            Core.
        create-unauth       Create a new device without authentication.
        delete-device       Delete the device with the given id.
        delete-registry     Deletes the specified registry.
        get                 Retrieve the device with the given id.
        get-registry        Retrieves a device registry.
        get-state           Retrieve a device's state blobs.
        list                List all devices in the registry.
        list-registries     List all registries in the project.
        patch-es256         Patch the device to add an ES256 public key to the
                            device.
        patch-rs256         Patch the device to add an RSA256 public key to the
                            device.
    
    optional arguments:
      -h, --help            show this help message and exit
      --pubsub_topic PUBSUB_TOPIC
                            Google Cloud Pub/Sub topic. Format is
                            projects/project_id/topics/topic-id
      --project_id PROJECT_ID
                            GCP cloud project name.
      --ec_public_key_file EC_PUBLIC_KEY_FILE
                            Path to public ES256 key file.
      --rsa_certificate_file RSA_CERTIFICATE_FILE
                            Path to RS256 certificate file.
      --cloud_region CLOUD_REGION
                            GCP cloud region
      --service_account_json SERVICE_ACCOUNT_JSON
                            Path to service account json file.
      --registry_id REGISTRY_ID
                            Registry id. If not set, a name will be generated.
      --device_id DEVICE_ID
                            Device id.




.. _Google Cloud SDK: https://cloud.google.com/sdk/